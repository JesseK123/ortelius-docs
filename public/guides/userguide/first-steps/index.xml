<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ortelius User Guide and API Reference – First Steps</title>
    <link>/guides/userguide/first-steps/</link>
    <description>Recent content in First Steps on Ortelius User Guide and API Reference</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/guides/userguide/first-steps/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Guides: Get Started by Adding Ortelius to Your Pipeline</title>
      <link>/guides/userguide/first-steps/2-intro-to-set-up/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guides/userguide/first-steps/2-intro-to-set-up/</guid>
      <description>
        
        
        &lt;h2 id=&#34;ortelius-pipeline-automation-poc&#34;&gt;Ortelius&amp;rsquo; Pipeline Automation POC&lt;/h2&gt;
&lt;p&gt;In order to continuously gather pipeline intelligence, Ortelius must become part of your pipeline. Ortelius integrates into your CI/CD process using the Ortelius Command Line (CLI). The Ortelius CLI gathers supply chain data based on a single pipeline workflow at the build and deploy steps. The build step gathers Swagger, SBOM, Readme, licenses, Git data, Docker image, and other build output. The deploy step records when a release occurs, what was sent and where the objects were sent to.&lt;/p&gt;
&lt;p&gt;For the most up to date information on the Ortelius CLI visit the &lt;a href=&#34;https://github.com/Ortelius/cli/blob/main/doc/dh.md&#34;&gt;Ortelius GitHub Repository&lt;/a&gt;. You will find a complete list of parameters for collecting Swagger, SBOM and other tool reports and results.&lt;/p&gt;
&lt;p&gt;You can complete a POC setup using Ortelius integrated into your Pipeline. &lt;a href=&#34;/Ortelius-General-Poc.pdf&#34;&gt;Download the complete Ortelius POC Document&lt;/a&gt; to get started.&lt;/p&gt;
&lt;h3 id=&#34;install-the-ortelius-cli&#34;&gt;Install the Ortelius CLI&lt;/h3&gt;
&lt;p&gt;Install the Ortelius CLI to complete your POC. Install the Ortelius CLI where your CI/CD server is running. Refer to the &lt;a href=&#34;https://github.com/Ortelius/cli/blob/main/doc/dh.md&#34;&gt;Ortelius GitHub CLI Documentation&lt;/a&gt; for installation instructions.&lt;/p&gt;
&lt;h3 id=&#34;ortelius-data-gathering-using-toml&#34;&gt;Ortelius Data Gathering using .toml&lt;/h3&gt;
&lt;p&gt;The Ortelius CLI reads from a .toml file. The .toml file contains non-derived information for each artifact that you create at your build step. In Ortelius, an artifact is referred to as a &lt;em&gt;Component&lt;/em&gt;.  A &lt;em&gt;Component&lt;/em&gt; is a Container, DB Object, or file object (.jar, Lamda Function, Apex file, etc.). The .toml file will provide the &amp;rsquo;non-derived&amp;rsquo; data for the &lt;em&gt;Component&lt;/em&gt; your are tracking in Ortelius which includes the &lt;em&gt;Component&lt;/em&gt; name, owner, &lt;em&gt;Component type&lt;/em&gt;, and owner contact details.  The Ortelius CLI will read the .toml file from the Git Repository associated to your pipeline. If you are using a Mono Repository for your entire codebase, you will need a separate Component.toml file for each &lt;em&gt;Component&lt;/em&gt;, managed in sub-directories.&lt;/p&gt;
&lt;p&gt;In a cloud-native, microservice architecture there are many, if not hundreds, of &lt;em&gt;Components&lt;/em&gt;. Organizing your &lt;em&gt;Components&lt;/em&gt; within Ortelius is done in two ways. They are grouped based on a subject &lt;em&gt;Domain&lt;/em&gt; and assigned to a logical &lt;em&gt;Application&lt;/em&gt;. Not all &lt;em&gt;Components&lt;/em&gt; need to be assigned to an &lt;em&gt;Application&lt;/em&gt;, but they should be stored in a subject matter &lt;em&gt;Domain&lt;/em&gt; so they can be easily found and reused.&lt;/p&gt;
&lt;p&gt;A logical &lt;em&gt;Application&lt;/em&gt; is a collection of &lt;em&gt;Components&lt;/em&gt; that make up a complete software systems consumed by an end user. Applications are composed of shared &lt;em&gt;Components&lt;/em&gt; and &lt;em&gt;Application&lt;/em&gt; specific &lt;em&gt;Components&lt;/em&gt;, and are a logical representation of what &lt;em&gt;Components&lt;/em&gt; need to be deployed in order for the software system to run.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Once created, your .toml file does not need to be updated unless the non-derived information changes, or you want to reorganize to which Applications or &lt;em&gt;Domains&lt;/em&gt; the Component has been assigned. For example, a Component has been reassigned to a new owner and new team represented by a &lt;em&gt;Domain&lt;/em&gt; or &lt;em&gt;Application&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Perform the following steps to add your &lt;em&gt;Components&lt;/em&gt; using the .toml file:&lt;/p&gt;
&lt;h4 id=&#34;step-1---define-your-deployhub-pipeline-variables&#34;&gt;Step 1 - Define Your DeployHub Pipeline Variables&lt;/h4&gt;
&lt;p&gt;The following variables should be set at the beginning of your Pipeline.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DHURL&lt;/td&gt;
&lt;td&gt;URL to DeployHub Login&lt;/td&gt;
&lt;td&gt;The URL used to access DeployHub.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DHUSER&lt;/td&gt;
&lt;td&gt;UserID&lt;/td&gt;
&lt;td&gt;The ID used to log into DeployHub&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DHPASS&lt;/td&gt;
&lt;td&gt;password&lt;/td&gt;
&lt;td&gt;The password used to log into DeployHub. This can encrypted based on the CI/CD solution.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DOCKERREPO&lt;/td&gt;
&lt;td&gt;Name of your Docker Repository&lt;/td&gt;
&lt;td&gt;For Components that are Docker Images. Not needed for non-docker objects.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IMAGE_TAG&lt;/td&gt;
&lt;td&gt;Tag for the Docker Image if used&lt;/td&gt;
&lt;td&gt;For Components that are Docker Images. Not needed for non-docker objects.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;DHURL&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;https://console.ortelius.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;DHUSER&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;Stella99
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;DHPASS&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;chasinghorses
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;DOCKERREPO&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;quay.io/ortelius/hello-world
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;IMAGE_TAG&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;1.0.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;step-2---create-your-componenttoml-file&#34;&gt;Step 2 - Create your Component.toml file&lt;/h4&gt;
&lt;p&gt;Cut and paste the following into a component.toml file, update &amp;lsquo;your&amp;rsquo; information, and commit/push it to your Git Repository.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Application Name and Version - not required. If not used the Component will not be associated to an Application&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;GLOBAL.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;your&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Name&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;Application_Version = &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;your&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Version&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;# Define Component Name, Variant and Version - required
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;Name = &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;GLOBAL&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;your&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Component&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Name&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;Variant = &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;GIT_BRANCH&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;Version = &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;vyour&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Component&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Version&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;BUILD_NUM&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;-g&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SHORT_SHA&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;# Key/Values to associate to the Component Version
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;[Attributes]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    DockerBuildDate = &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;BLDDATE&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    DockerRepo = &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DOCKERREPO&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    DockerSha = &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DIGEST&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    DockerTag = &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;IMAGE_TAG&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    DiscordChannel = &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;your&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Discord&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;channel&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34; or SlackChannel = &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;your&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Slack&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Channel&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    ServiceOwner = &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;DHUSER&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;    ServiceOwnerEmail = &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;your&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Component&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Owner&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Email&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Application Name and Version&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;GLOBAL.Santa Fe Software.Online Store Company.Hipster Store.Prod.helloworld app&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Application_Version&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Define Component Name, Variant and Version&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Name&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;GLOBAL.Santa Fe Software.Online Store Company&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Variant&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;${GIT_BRANCH}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Version&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;v1.0.0.${BUILD_NUM}-g${SHORT_SHA}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Key/Values to associate to the Component Version&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Attributes&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;DockerBuildDate&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;${BLDDATE}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;DockerRepo&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;${DOCKERREPO}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;DockerSha&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;${DIGEST}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;DockerTag&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;${IMAGE_TAG}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;DiscordChannel&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;https://discord.gg/wM4b5yEFzS&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;ServiceOwner&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;${DHUSER}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;ServiceOwnerEmail&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;stella@DeployHub.io&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;step-3---add-a-step-in-your-pipeline-to-run-syft-if-you-are-not-generating-sboms-optional&#34;&gt;Step 3 - Add a step in your pipeline to run Syft if you are not generating SBOMS (Optional)&lt;/h4&gt;
&lt;p&gt;DeployHub can consume any SPDX and CycloneDX formatted SBOM. If you are already generating SBOMs, you will pass the name of the SBOM results to DeployHub is step 4 below. If you are not generating SBOMs as part of your pipeline process, you will need to add SBOM generation to collect the lower dependency data. Following is how to add Syft to your workflow to include the collection of SBOM data.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/anchore/syft&#34;&gt;Syft SBOM tool&lt;/a&gt; will generate Software Bill of Material Reports for popular coding languages and package managers, including Docker images.&lt;/p&gt;
&lt;p&gt;The following code example scans a Docker Image to generate the SBOM.  See &lt;a href=&#34;https://github.com/anchore/syft#supported-sources&#34;&gt;Syft Options&lt;/a&gt; to scan other objects and coding languages.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# install Syft&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; sh -s -- -b &lt;span style=&#34;color:#000&#34;&gt;$PWD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# create the SBOM&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./syft packages &lt;span style=&#34;color:#000&#34;&gt;$DOCKERREPO&lt;/span&gt;:&lt;span style=&#34;color:#000&#34;&gt;$IMAGE_TAG&lt;/span&gt; --scope all-layers -o cyclonedx-json &amp;gt; cyclonedx.json
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# display the SBOM&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cat cyclonedx.json
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;step-4---run-the-ortelius-cli-to-add-your-component-and-create-an-application&#34;&gt;Step 4 - Run the Ortelius CLI to add Your Component and Create an Application&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: To complete the process you will need to install the Ortelius CLI where your CI/CD server is running. Refer to the &lt;a href=&#34;https://github.com/Ortelius/cli/blob/main/doc/dh.md&#34;&gt;Ortelius GitHub CLI Documentation&lt;/a&gt; for installation instructions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Execute the following calls to the Ortelius CLI as part of your workflow. It should be called after the build and SBOM generation:&lt;/p&gt;
&lt;p&gt;With CycloneDX SBOM&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dh updatecomp --rsp component.toml --deppkg &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cyclonedx@name of your SBOM file&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Example:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dh updatecomp --rsp component.toml --deppkg &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cyclonedx@cyclonedx.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With SPDX SBOM&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dh updatecomp --rsp component.toml --deppkg &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;spdx@name of your SBOM file. &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Example:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dh updatecomp --rsp component.toml --deppkg &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;spdx@spdx.json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Without SBOM&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dh updatecomp --rsp component.toml 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;expected-results&#34;&gt;Expected Results&lt;/h2&gt;
&lt;p&gt;Bring up your Ortelius URL and login using the DHUSER and DHPASS from Step 1 above.&lt;/p&gt;
&lt;h3 id=&#34;application-to-component-dependencies&#34;&gt;Application to Component Dependencies&lt;/h3&gt;
&lt;p&gt;Select Your Application from the ‘Application View.’ It should show you one Component as a dependency.&lt;/p&gt;
&lt;img src=&#39;/ApplicationComponentDepVersions.png&#39;  /&gt;
&lt;div style=&#34;margin-left:20%&#34;&gt;&lt;/div&gt;
&lt;h3 id=&#34;application-level-sbom-and-cve&#34;&gt;Application Level SBOM and CVE&lt;/h3&gt;
&lt;p&gt;Review the Application SBOM and vulnerabilities. Note: CVE Results may vary depending on the time of the scan.&lt;/p&gt;
&lt;img src=&#39;/ApplicationSBOMandCVE.png&#39;  /&gt;
&lt;div style=&#34;margin-left:20%&#34;&gt;&lt;br&gt;&lt;/div&gt;
&lt;h3 id=&#34;component-ownership&#34;&gt;Component Ownership&lt;/h3&gt;
&lt;p&gt;Go to the ‘Component View’. You should see your Component Ownership and Detail, including its SBOM and vulnerabilities.&lt;/p&gt;
&lt;img src=&#39;/Componetownership.png&#39;  /&gt;
&lt;div style=&#34;margin-left:20%&#34;&gt;&lt;/div&gt;
&lt;h3 id=&#34;supply-chain-package-search&#34;&gt;Supply Chain “Package” Search&lt;/h3&gt;
&lt;p&gt;Go to the ‘Application View.’ Select ‘Package Search’ from the high-level menu. Enter a package name such as ‘spring’ to identify all locations where the package is used.&lt;/p&gt;
&lt;img src=&#39;/packagesearch.png&#39;  /&gt;
&lt;div style=&#34;margin-left:20%&#34;&gt;&lt;/div&gt;
&lt;br&gt;
&lt;img src=&#39;/PackageSerachResults.png&#39;  /&gt;
&lt;div style=&#34;margin-left:20%&#34;&gt;&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Guides: Overview of Ortelius Objects and Concepts</title>
      <link>/guides/userguide/first-steps/basic-concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guides/userguide/first-steps/basic-concepts/</guid>
      <description>
        
        
        &lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Ortelius&amp;rsquo; core objects are &lt;em&gt;Domains&lt;/em&gt;, &lt;em&gt;Applications&lt;/em&gt;, and &lt;em&gt;Components&lt;/em&gt;. &lt;em&gt;Components&lt;/em&gt; are the the objects that are cataloged, versioned and mapped across software supply chain. &lt;em&gt;Environments&lt;/em&gt; and &lt;em&gt;Endpoints&lt;/em&gt; are used to track releases to your clusters, cloud, or physical data centers and are referenced during your pipeline deployments for inventory control.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Domains&lt;/em&gt; are core to Ortelius&amp;rsquo; management of microservices.  &lt;em&gt;Domains&lt;/em&gt; are hierarchical and pass inheritance from parent to siblings. For this reason, &lt;em&gt;Components&lt;/em&gt; can be shared across the &lt;em&gt;Subdomains&lt;/em&gt;. The hierarchical structure of &lt;em&gt;Domains&lt;/em&gt; provides a high-level of control and management over how microservices are shared and reused.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/guides/userguide/images/OnlineStore-Domains.jpg&#34; alt=&#34;Example of Domains, Applications, Components and Environments&#34;&gt;&lt;/p&gt;
&lt;p&gt;Other &lt;em&gt;Objects&lt;/em&gt; include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Date&lt;/li&gt;
&lt;li&gt;User&lt;/li&gt;
&lt;li&gt;UserGroup (Admin or User)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These Objects can be referenced using Ortelius APIs.&lt;/p&gt;
&lt;p&gt;Following is a description of each Object and their attributes.&lt;/p&gt;
&lt;h2 id=&#34;_application_-object&#34;&gt;&lt;em&gt;Application&lt;/em&gt; Object&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;/guides/userguide/packaging-applications/&#34;&gt;&lt;em&gt;Applications&lt;/em&gt;&lt;/a&gt; are a collection of &lt;em&gt;Components&lt;/em&gt; that can be deployed as a single software solution. You define an &lt;em&gt;Application&lt;/em&gt; by associating the &lt;em&gt;Components&lt;/em&gt; it will consume. The first version is the &lt;em&gt;Application Base Version.&lt;/em&gt; When you change this &lt;em&gt;Application Base Version&lt;/em&gt;, you create a new &lt;em&gt;Application Version&lt;/em&gt;. &lt;em&gt;Applications&lt;/em&gt; are assigned and deployed to &lt;em&gt;Environments&lt;/em&gt;. &lt;em&gt;Applications&lt;/em&gt; are associated to a &lt;em&gt;Domain&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Application Base Version&lt;/em&gt;&lt;/strong&gt; : Defines the software product in terms of &lt;em&gt;Components&lt;/em&gt;, &lt;em&gt;Attributes,&lt;/em&gt; and assigned &lt;em&gt;Environments&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Application Version&lt;/em&gt;&lt;/strong&gt; : This represents any changes made in to the &lt;em&gt;Base Versions&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An &lt;em&gt;Application&lt;/em&gt; has the following properties:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Property&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;A unique identifier for the &lt;em&gt;Application&lt;/em&gt;  in the database.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Application&lt;/em&gt; name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fqdomain&lt;/td&gt;
&lt;td&gt;Fully qualified &lt;em&gt;Domain&lt;/em&gt; name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;summary&lt;/td&gt;
&lt;td&gt;Summary of the &lt;em&gt;Domain&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;owner&lt;/td&gt;
&lt;td&gt;&lt;em&gt;User&lt;/em&gt; or &lt;em&gt;Group&lt;/em&gt; that owns it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;parent&lt;/td&gt;
&lt;td&gt;The Base &lt;em&gt;Application&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;predecessor&lt;/td&gt;
&lt;td&gt;Predecessor &lt;em&gt;Application Version&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Applications&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Multiple &lt;em&gt;Applications&lt;/em&gt; used to create a &lt;em&gt;Release&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Components&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;The objects that the &lt;em&gt;Application&lt;/em&gt; consumes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;approvals&lt;/td&gt;
&lt;td&gt;Allows a control point for progressing a change within the pipeline process.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;requests&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;Change Request&lt;/em&gt; objects associated with this &lt;em&gt;Application&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;creator&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;User&lt;/em&gt; or &lt;em&gt;Group&lt;/em&gt; who created it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;modifier&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;User&lt;/em&gt; or &lt;em&gt;Group&lt;/em&gt; who last modified it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctime&lt;/td&gt;
&lt;td&gt;The date/time it was created.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mtime&lt;/td&gt;
&lt;td&gt;The date/time it was last modified.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;KV Configurations&lt;/td&gt;
&lt;td&gt;Key Value Pairs for managing associative arrays.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;_component_-object&#34;&gt;&lt;em&gt;Component&lt;/em&gt; Object&lt;/h2&gt;
&lt;p&gt;Ortelius manages microservices and other reusable objects as &lt;a href=&#34;/guides/userguide/publishing-components/&#34;&gt;&lt;em&gt;Components&lt;/em&gt;&lt;/a&gt;. These are assigned to an &lt;em&gt;Application&lt;/em&gt; even though they are managed independently. By assigning &lt;em&gt;Components&lt;/em&gt; to &lt;em&gt;Applications&lt;/em&gt; you track a &amp;rsquo;logical&amp;rsquo; view of your software solution. In a monolithic approach, this happened at the software compile and link step. In microservices though, they are loosely coupled and linked at run-time. Defining &lt;em&gt;Components&lt;/em&gt; to &lt;em&gt;Applications&lt;/em&gt; puts the &lt;em&gt;Application&lt;/em&gt; back in the picture, even if it is only a &amp;rsquo;logical&amp;rsquo; view.&lt;/p&gt;
&lt;p&gt;If you are an API or microservice developer, this will be where you do most of your work. However, application developers may also define &lt;em&gt;Components&lt;/em&gt; for a specific &lt;em&gt;Application&lt;/em&gt;. &lt;em&gt;Components&lt;/em&gt; are microservices (containers), Database updates, or other deployable objects. By tracking the low level deployment metadata for a &lt;em&gt;Component&lt;/em&gt;, it can be easily shared and released in a consistent way across team.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Components&lt;/em&gt; change over time, and so Ortelius contains &lt;em&gt;Component Base Versions&lt;/em&gt; and &lt;em&gt;Component Versions&lt;/em&gt; like those of &lt;em&gt;Application Base Versions&lt;/em&gt; and &lt;em&gt;Application Versions.&lt;/em&gt; And like &lt;em&gt;Applications&lt;/em&gt;, &lt;em&gt;Components&lt;/em&gt; are associated to a Domain.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Component Base Version&lt;/em&gt;&lt;/strong&gt; : Objects within Ortelius that contain the files and procedures deployed to &lt;em&gt;Endpoints&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Component Version&lt;/em&gt;&lt;/strong&gt; : A child of the &lt;em&gt;Component Base Version&lt;/em&gt; that represents changes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A &lt;em&gt;Component&lt;/em&gt; Object has the following properties:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Property&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;A unique identifier for the &lt;em&gt;Component&lt;/em&gt; as used in the database.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;The name of the &lt;em&gt;Component&lt;/em&gt;.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fqdomain&lt;/td&gt;
&lt;td&gt;Fully qualified &lt;em&gt;Domain&lt;/em&gt; name.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;summary&lt;/td&gt;
&lt;td&gt;Description of the &lt;em&gt;Component&lt;/em&gt;.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;domain&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Domain&lt;/em&gt; in which the &lt;em&gt;Component&lt;/em&gt; is contained.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;owner&lt;/td&gt;
&lt;td&gt;User or UserGroup that owns the &lt;em&gt;Component&lt;/em&gt;.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;parent&lt;/td&gt;
&lt;td&gt;The Base &lt;em&gt;Component&lt;/em&gt;.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;predecessor&lt;/td&gt;
&lt;td&gt;The version on which this is based.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;items&lt;/td&gt;
&lt;td&gt;The items that make up this &lt;em&gt;Component&lt;/em&gt;.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;servers&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;Endpoints&lt;/em&gt; to which this &lt;em&gt;Component&lt;/em&gt; has been deployed.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;requests&lt;/td&gt;
&lt;td&gt;The change requests associated with this &lt;em&gt;Component&lt;/em&gt; .&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lastbuild&lt;/td&gt;
&lt;td&gt;The last build number for this &lt;em&gt;Component&lt;/em&gt;, 0 if never built.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;creator&lt;/td&gt;
&lt;td&gt;The User who created this &lt;em&gt;Component&lt;/em&gt;.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;modifier&lt;/td&gt;
&lt;td&gt;The User who last modified this &lt;em&gt;Component&lt;/em&gt;.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctime&lt;/td&gt;
&lt;td&gt;The date/time the &lt;em&gt;Component&lt;/em&gt; was created.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mtime&lt;/td&gt;
&lt;td&gt;The date/time the &lt;em&gt;Component&lt;/em&gt; was last modified.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Key Value Configurations&lt;/td&gt;
&lt;td&gt;Key Value Pairs for managing associative arrays.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;_component_-and-_application_-relationships&#34;&gt;&lt;em&gt;Component&lt;/em&gt; and &lt;em&gt;Application&lt;/em&gt; Relationships&lt;/h3&gt;
&lt;p&gt;There is a many-to-many relationship between &lt;em&gt;Applications&lt;/em&gt; and &lt;em&gt;Components.&lt;/em&gt; An &lt;em&gt;Application&lt;/em&gt; can contain many different &lt;em&gt;Components&lt;/em&gt;, and a &lt;em&gt;Component&lt;/em&gt; can be used across many different &lt;em&gt;Applications&lt;/em&gt;.  &lt;em&gt;Components&lt;/em&gt; can be easily shared between &lt;em&gt;Applications&lt;/em&gt;. Ortelius tracks and versions the &lt;em&gt;Component&lt;/em&gt; relationships including to which &lt;em&gt;Applications&lt;/em&gt; they have been assigned.&lt;/p&gt;
&lt;h3 id=&#34;_component_-and-_application_-versioning&#34;&gt;&lt;em&gt;Component&lt;/em&gt; and &lt;em&gt;Application&lt;/em&gt; Versioning&lt;/h3&gt;
&lt;p&gt;A backend versioning engine tracks all software deployment configurations. This is done within an &lt;em&gt;Application&lt;/em&gt;. An &lt;em&gt;Application&lt;/em&gt; consists of one or more &lt;em&gt;Components&lt;/em&gt;. Versioning tracks all changes in both your &lt;em&gt;Application&lt;/em&gt; and &lt;em&gt;Component&lt;/em&gt; attributes.&lt;/p&gt;
&lt;p&gt;When you first define your &lt;em&gt;Application&lt;/em&gt;, you create an &lt;em&gt;Application Base Version&lt;/em&gt;. Over time, as you update your code and deliver new features, each change to the &lt;em&gt;Application&lt;/em&gt; creates a new &lt;em&gt;Application Version&lt;/em&gt;.  &lt;em&gt;Application Versions&lt;/em&gt; package all your &lt;em&gt;Components&lt;/em&gt; in your entire software product. Like &lt;em&gt;Application Versions&lt;/em&gt;, there is an initial &lt;em&gt;Component Base Version&lt;/em&gt; and subsequent &lt;em&gt;Component Versions,&lt;/em&gt; which represent any updates . An &lt;em&gt;Application Base Version&lt;/em&gt; or &lt;em&gt;Component Base Version&lt;/em&gt; is always the first one created, and it acts as a model for subsequent &lt;em&gt;Application&lt;/em&gt; or &lt;em&gt;Component Versions&lt;/em&gt;. Otherwise they are identical types of objects.&lt;/p&gt;
&lt;p&gt;When a new &lt;em&gt;Application Version&lt;/em&gt; is created from either an &lt;em&gt;Application Base Version&lt;/em&gt; or another &lt;em&gt;Application Version&lt;/em&gt;, it inherits all previous &lt;em&gt;Components&lt;/em&gt; from its predecessor. That predecessor is determined when running a &lt;em&gt;Create Version Task&lt;/em&gt; for an &lt;em&gt;Application Version&lt;/em&gt;. You can specify whether the new &lt;em&gt;Application Version&lt;/em&gt; inherits its &lt;em&gt;Components&lt;/em&gt; from the original &lt;em&gt;Application Base Version&lt;/em&gt;, the latest &lt;em&gt;Application Version&lt;/em&gt;, or a specific &lt;em&gt;Application Version&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Ortelius uses a simple versioning number schema starting at 1 and incrementing over time, for example Myapp;1, Myapp;2.&lt;/p&gt;
&lt;p&gt;You can use your CI/CD process to include variance in your versioning number (base name, variant, version).  See &lt;a href=&#34;/guides/userguide/integrations/ci-cd_integrations/#_component_-versioning-schema&#34;&gt;Component Versioning Schema&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;_date_-object&#34;&gt;&lt;em&gt;Date&lt;/em&gt; Object&lt;/h2&gt;
&lt;p&gt;Dates track the date/time of the creation, deletion, or update of an Object.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Date&lt;/em&gt; has the following properties:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;to_int(secs)&lt;/td&gt;
&lt;td&gt;Returns an integer representing the date as the number of seconds since midnight on January 1st 1970 (epoch). The secs parameter is optional. If needed, the specified number of seconds is added to the date/time before the new value is returned.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;to_char(fmt)&lt;/td&gt;
&lt;td&gt;Formats the date into a string given by the passed fmt string. The fmt string should contain characters as specified below.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;_domain_-object&#34;&gt;&lt;em&gt;Domain&lt;/em&gt; Object&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;/guides/userguide/customizations/2-define-your-functions-and-procedures/&#34;&gt;&lt;em&gt;Domain&lt;/em&gt; Object&lt;/a&gt; represents the highest order of organization for managing &lt;em&gt;Applications&lt;/em&gt;, &lt;em&gt;Components&lt;/em&gt; and &lt;em&gt;Environments&lt;/em&gt;. &lt;em&gt;Domains&lt;/em&gt; are hierarchical and can have &lt;em&gt;Subdomains&lt;/em&gt;. &lt;em&gt;Subdomains&lt;/em&gt; inherit the parents properties, &lt;em&gt;Tasks&lt;/em&gt; and access.&lt;/p&gt;
&lt;p&gt;Your microservices, a type of &lt;em&gt;Component&lt;/em&gt;, are cataloged based on &lt;em&gt;Domains&lt;/em&gt; and &lt;em&gt;Subdomains&lt;/em&gt; which you define. &lt;em&gt;Domains&lt;/em&gt; catalog microservices that solve the same &amp;lsquo;problem sets.&amp;rsquo; In a similar way, &lt;em&gt;Applications&lt;/em&gt; are assigned to their own &lt;em&gt;Domain&lt;/em&gt;. &lt;em&gt;Environments&lt;/em&gt; and &lt;em&gt;Endpoints&lt;/em&gt; are associated to &lt;em&gt;Domains&lt;/em&gt; that are managing &lt;em&gt;Applications&lt;/em&gt;. The highest level &lt;em&gt;Domain&lt;/em&gt; is your &lt;em&gt;Global Domain&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Domains&lt;/em&gt; also include &lt;em&gt;Tasks&lt;/em&gt;. &lt;em&gt;Tasks&lt;/em&gt; include Move, Approve, Version and Deploy. &lt;em&gt;Tasks&lt;/em&gt; can be called by external solutions via APIs for integration into your Continuous Delivery Pipeline. &lt;em&gt;Tasks&lt;/em&gt; are associated to any &lt;em&gt;Domain&lt;/em&gt; and can be defined as &lt;em&gt;Pre&lt;/em&gt; or &lt;em&gt;Post&lt;/em&gt;.  &lt;em&gt;Tasks&lt;/em&gt; are normally defined to &lt;em&gt;Life Cycle Subdomains&lt;/em&gt; and support continuous configuration management in your continuous delivery process.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Life Cycle Subdomains&lt;/em&gt; allow you to automate the push of your continuous deployments from development through production. Ortelius can be called by your Continuous Delivery engine (Jenkins, Bamboo, GitLab, CircleCI, Puppet Relay, Google CloudBuild or GitHub Actions) to perform the continuous deployment task across all states of your pipeline. If you are not using a Continuous Delivery orchestration engine, you can assign &lt;em&gt;Tasks&lt;/em&gt; to your &lt;em&gt;Life Cycle Subdomain&lt;/em&gt; to define a continuous deployment &amp;lsquo;promotion&amp;rsquo; process within Ortelius.&lt;/p&gt;
&lt;p&gt;The following properties can be accessed on the &lt;em&gt;Domain&lt;/em&gt; object:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Property&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Domain&lt;/em&gt; id, as used in the database.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Domain&lt;/em&gt; name.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fqdomain&lt;/td&gt;
&lt;td&gt;Fully qualified &lt;em&gt;Domain&lt;/em&gt; name.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;summary&lt;/td&gt;
&lt;td&gt;Summary text.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;domain&lt;/td&gt;
&lt;td&gt;Higher level &lt;em&gt;Domain&lt;/em&gt; to which it belongs.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;subdomains&lt;/td&gt;
&lt;td&gt;List of &lt;em&gt;Domain&lt;/em&gt; objects which are contained within it.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Life Cycle&lt;/td&gt;
&lt;td&gt;A &lt;em&gt;Domain&lt;/em&gt; that includes a pipeline and the lowest level &lt;em&gt;Subdomains&lt;/em&gt;. &lt;em&gt;Life Cycle-domains&lt;/em&gt; cannot have &lt;em&gt;Subdomains&lt;/em&gt;.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Applications&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;Application&lt;/em&gt; objects which are contained within it.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Environments&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;Environment&lt;/em&gt; objects which are contained within it.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;creator&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;User&lt;/em&gt; or &lt;em&gt;Group&lt;/em&gt; Object representing the user who created it.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;modifier&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;User&lt;/em&gt; or &lt;em&gt;Group&lt;/em&gt;  Object representing the user who last modified it.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctime&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Date&lt;/em&gt; Object representing the date/time it was created.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mtime&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Date&lt;/em&gt; Object representing the date/time it was last modified.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;owner&lt;/td&gt;
&lt;td&gt;&lt;em&gt;User&lt;/em&gt; or &lt;em&gt;Group&lt;/em&gt; Objects that owns it.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;_environment_-object&#34;&gt;&lt;em&gt;Environment&lt;/em&gt; Object&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;/guides/userguide/first-steps/2-define-environments/&#34;&gt;&lt;em&gt;Environment&lt;/em&gt; Object&lt;/a&gt; represents a collection of &lt;em&gt;Endpoints&lt;/em&gt; where an &lt;em&gt;Application&lt;/em&gt; is deployed. Multiple &lt;em&gt;Environments&lt;/em&gt; can represent your pipeline stages such as Development, Testing, and Production for a single &lt;em&gt;Application&lt;/em&gt;.  Your &lt;em&gt;Application&lt;/em&gt; can have as many &lt;em&gt;Envrionments&lt;/em&gt; as needed.&lt;/p&gt;
&lt;p&gt;The following properties can be accessed for an &lt;em&gt;Environment&lt;/em&gt; object:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Property&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;Unique identifier as used in the database.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Environment&lt;/em&gt; name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fqdomain&lt;/td&gt;
&lt;td&gt;Fully qualified &lt;em&gt;Domain&lt;/em&gt; name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;summary&lt;/td&gt;
&lt;td&gt;Description of the &lt;em&gt;Environment&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;domain&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Domain&lt;/em&gt; in which it is contained.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;owner&lt;/td&gt;
&lt;td&gt;&lt;em&gt;User&lt;/em&gt; or &lt;em&gt;Group&lt;/em&gt; Objects that owns it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;basedir&lt;/td&gt;
&lt;td&gt;Base directory for deployments.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Endpoints&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;Endpoints&lt;/em&gt; assigned to it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Applications&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;Applications&lt;/em&gt; associated to it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;creator&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;User&lt;/em&gt; or &lt;em&gt;Group&lt;/em&gt; who created it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;modifier&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;User&lt;/em&gt; or &lt;em&gt;Group&lt;/em&gt; who last modified it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctime&lt;/td&gt;
&lt;td&gt;The date/time it was created.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mtime&lt;/td&gt;
&lt;td&gt;The date/time it was last modified.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;parent&lt;/td&gt;
&lt;td&gt;Parent &lt;em&gt;Domain&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;_endpoint_-object&#34;&gt;&lt;em&gt;Endpoint&lt;/em&gt; Object&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;/guides/userguide/first-steps/2-define-endpoints/&#34;&gt;&lt;em&gt;Endpoint&lt;/em&gt; Object&lt;/a&gt; (Local Helm Host, container, VM/Cloud Image) represents where a deployment will be sent. &lt;em&gt;Endpoints&lt;/em&gt; are assigned to an &lt;em&gt;Environment&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;_endpoint_-mapping&#34;&gt;&lt;em&gt;Endpoint&lt;/em&gt; Mapping&lt;/h3&gt;
&lt;p&gt;Each &lt;em&gt;Component&lt;/em&gt; is assigned a Type attribute. You can specify which kind of &lt;em&gt;Endpoint&lt;/em&gt; is needed. For example, a Database &lt;em&gt;Component&lt;/em&gt; is installed onto an &lt;em&gt;Endpoint&lt;/em&gt; with a corresponding Database &lt;em&gt;Type&lt;/em&gt; definition. A &lt;em&gt;Component&lt;/em&gt; is assigned a single Type, while an &lt;em&gt;Endpoint&lt;/em&gt; can be assigned multiple Types. For example, if your single &lt;em&gt;Endpoint&lt;/em&gt; needed to have both a database and your application binaries installed, it would be assigned both a &amp;lsquo;Database&amp;rsquo; and a &amp;lsquo;Binary&amp;rsquo; &lt;em&gt;Type&lt;/em&gt; attribute.&lt;/p&gt;
&lt;p&gt;To map a &lt;em&gt;Component&lt;/em&gt; to &lt;em&gt;Endpoints&lt;/em&gt;, assign one or more &lt;em&gt;Component&lt;/em&gt; Types to each &lt;em&gt;Endpoint&lt;/em&gt;. Then assign a single Type attribute to that &lt;em&gt;Component&lt;/em&gt;. When an &lt;em&gt;Application&lt;/em&gt; is deployed, each &lt;em&gt;Component&lt;/em&gt; within the &lt;em&gt;Application&lt;/em&gt; will be deployed to each &lt;em&gt;Endpoint&lt;/em&gt; if the &lt;em&gt;Component&amp;rsquo;s Type&lt;/em&gt; attribute matches one of the &lt;em&gt;Endpoint&amp;rsquo;s&lt;/em&gt; Type attributes. Ortelius ships with standard &lt;em&gt;Component&lt;/em&gt; and &lt;em&gt;Endpoint&lt;/em&gt; Types and allows you to define custom Type attributes.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Endpoint&lt;/em&gt; object has the following properties:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Property&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;A unique identifier as used in the database.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;Endpoint&lt;/em&gt; name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fqdomain&lt;/td&gt;
&lt;td&gt;Fully qualified &lt;em&gt;Domain&lt;/em&gt; name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;summary&lt;/td&gt;
&lt;td&gt;Description of the &lt;em&gt;Endpoint&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;domain&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Domain&lt;/em&gt; in which it is contained.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;owner&lt;/td&gt;
&lt;td&gt;&lt;em&gt;User&lt;/em&gt; or &lt;em&gt;Group&lt;/em&gt; that owns it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hostname&lt;/td&gt;
&lt;td&gt;Hostname (if set) or name otherwise.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;basedir&lt;/td&gt;
&lt;td&gt;Base Directory for Deployments.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;type&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Endpoint&lt;/em&gt; Type, ie: cluster, windows, cloud, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Components&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;Components&lt;/em&gt; currently installed on it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;creator&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;User&lt;/em&gt; or &lt;em&gt;Group&lt;/em&gt; who created it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;modifier&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;User&lt;/em&gt; or &lt;em&gt;Group&lt;/em&gt; who last modified it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctime&lt;/td&gt;
&lt;td&gt;The date/time it was created.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mtime&lt;/td&gt;
&lt;td&gt;The date/time it was last modified.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Key Value Configurations&lt;/td&gt;
&lt;td&gt;Key Value Pairs for managing associative arrays.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;_user_-object&#34;&gt;&lt;em&gt;User&lt;/em&gt; Object&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;User&lt;/em&gt; Object represents a User in Ortelius. It has the following properties:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Property&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Return Type&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;User id, as used in the database.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;User Name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kind&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Returns &amp;ldquo;user&amp;rdquo;. Used to differentiate between users and groups when retrieving an owner object.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fqdomain&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Fully qualified &lt;em&gt;Domain&lt;/em&gt; name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;realname&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;User&amp;rsquo;s&lt;/em&gt; full name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;email&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;User&amp;rsquo;s&lt;/em&gt; email address.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;phone&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;User&amp;rsquo;s&lt;/em&gt; telephone number.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;groups&lt;/td&gt;
&lt;td&gt;Array&lt;/td&gt;
&lt;td&gt;Array of &lt;em&gt;Group&lt;/em&gt; Objects to which this User belongs.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lastlogin&lt;/td&gt;
&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;The date/time last logged into Ortelius.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;creator&lt;/td&gt;
&lt;td&gt;User&lt;/td&gt;
&lt;td&gt;&lt;em&gt;User&lt;/em&gt; or &lt;em&gt;Group&lt;/em&gt; Object representing who created this &lt;em&gt;User&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;modifier&lt;/td&gt;
&lt;td&gt;User&lt;/td&gt;
&lt;td&gt;&lt;em&gt;User&lt;/em&gt; or &lt;em&gt;Group&lt;/em&gt; Object representing who last modified this &lt;em&gt;User&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctime&lt;/td&gt;
&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Date&lt;/em&gt; Object representing the date/time the User was created.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mtime&lt;/td&gt;
&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Date&lt;/em&gt; Object representing the date/time the User was last modified.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;owner&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;&lt;em&gt;User&lt;/em&gt; or &lt;em&gt;Group&lt;/em&gt; that owns the &lt;em&gt;User&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;_group_-object&#34;&gt;&lt;em&gt;Group&lt;/em&gt; Object&lt;/h2&gt;
&lt;p&gt;You can have two &lt;em&gt;Groups&lt;/em&gt; which users can be assigned: Users and Administrators.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Group&lt;/em&gt; Object has the following properties:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;A unique identifier as used in the database.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Group&lt;/em&gt; Name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kind&lt;/td&gt;
&lt;td&gt;Identifies whether this is a &lt;em&gt;User&lt;/em&gt; or a &lt;em&gt;Group&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fqdomain&lt;/td&gt;
&lt;td&gt;Fully qualified &lt;em&gt;Domain&lt;/em&gt; name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;email&lt;/td&gt;
&lt;td&gt;The &lt;em&gt;Group&amp;rsquo;s&lt;/em&gt; email address.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;creator&lt;/td&gt;
&lt;td&gt;&lt;em&gt;User&lt;/em&gt; or &lt;em&gt;Group&lt;/em&gt; Object representing who created this Group.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;modifier&lt;/td&gt;
&lt;td&gt;&lt;em&gt;User&lt;/em&gt; or &lt;em&gt;Group&lt;/em&gt; Object representing who last modified this &lt;em&gt;Group&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctime&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Date&lt;/em&gt; Object representing the date/time it was created.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mtime&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Date&lt;/em&gt; Object representing the date/time it was last modified.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;owner&lt;/td&gt;
&lt;td&gt;&lt;em&gt;User&lt;/em&gt; or &lt;em&gt;Group&lt;/em&gt; that owns the object.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Guides: Building Your Domain Catalog</title>
      <link>/guides/userguide/first-steps/2-defining-domains/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guides/userguide/first-steps/2-defining-domains/</guid>
      <description>
        
        
        &lt;h2 id=&#34;a-domain-driven-design&#34;&gt;A Domain Driven Design&lt;/h2&gt;
&lt;p&gt;An Ortelius &lt;em&gt;Domain&lt;/em&gt; is how Ortelius organizes and shares data across teams.  You publish your &lt;em&gt;Components&lt;/em&gt; to a &lt;em&gt;Domain&lt;/em&gt;, you package your &lt;em&gt;Application&lt;/em&gt; in a Project &lt;em&gt;Domain&lt;/em&gt; and you track your continuous delivery pipeline with a Life Cycle &lt;em&gt;Domain&lt;/em&gt;. All Ortelius objects are assigned to a &lt;em&gt;Domain&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For this reason, it may be helpful to review how you might want to organize your data in &lt;em&gt;Domains&lt;/em&gt;. &lt;em&gt;Domain&lt;/em&gt; organization is not required, but makes finding and sharing information much more efficient.&lt;/p&gt;
&lt;h3 id=&#34;domains-and-your-domain-driven-design&#34;&gt;Domains and your Domain Driven Design&lt;/h3&gt;
&lt;p&gt;A Domain-Driven Design (DDD) is often used when moving from a traditional development model to a cloud-native, decoupled model. With microservices, it is often recommended that a  structured method for organizing microservices into &amp;ldquo;solution&amp;rdquo; spaces be completed to facilitate reuse across siloed teams. Ortelius &lt;em&gt;Domains&lt;/em&gt; provides this organization.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Domains&lt;/em&gt; publish microservices and other reusable objects (web components, DB updates, etc.) making it easier to share &lt;em&gt;Components&lt;/em&gt; across siloed teams. Domains can be structured to closely resemble the patterns of your organization. They can represent functional areas such as &amp;lsquo;security services&amp;rsquo; or departments, teams, geographical locations and software projects.&lt;/p&gt;
&lt;h3 id=&#34;top-down-structure&#34;&gt;Top Down Structure&lt;/h3&gt;
&lt;p&gt;Everyone has a single high-level &amp;ldquo;Global&amp;rdquo; &lt;em&gt;Domain&lt;/em&gt;.  All other &lt;em&gt;Domains&lt;/em&gt; are &lt;em&gt;Subdomains&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;Subdomain&lt;/em&gt; inherits all the access properties from its parent &lt;em&gt;Domain&lt;/em&gt;. This inheritance continues down through all &lt;em&gt;Subdomains&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There are four common ways to implement &lt;em&gt;Domains&lt;/em&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Purpose&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Site &lt;em&gt;Domain&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;This is the highest-level and default &lt;em&gt;Domain&lt;/em&gt;. Your default Site &lt;em&gt;Domain&lt;/em&gt; name is &amp;lsquo;Global.&amp;rsquo; You can rename your Site &lt;em&gt;Domain&lt;/em&gt; if needed. Anything defined to this level can be shared across all lower level &lt;em&gt;Subdomains&lt;/em&gt;. For example, &lt;em&gt;Environments&lt;/em&gt; and &lt;em&gt;Tasks&lt;/em&gt; defined to the Site &lt;em&gt;Domain&lt;/em&gt; are shared by all child &lt;em&gt;Subdomains&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Catalog &lt;em&gt;Subdomains&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;These &lt;em&gt;Domains&lt;/em&gt; are used to organize reusable &lt;em&gt;Components&lt;/em&gt;, such as microservices. At this level, you create as many &lt;em&gt;Subdomains&lt;/em&gt; as needed to represent your &lt;em&gt;Component&lt;/em&gt; organization based on the &amp;ldquo;solution space&amp;rdquo; they serve. For example, you could build your Catalog as follows: &lt;li&gt; Security Services&lt;/li&gt;&lt;li&gt;Purchase Processing&lt;/li&gt;&lt;li&gt;Data Access&lt;li&gt;Ad Services&lt;/li&gt;  A Catalog &lt;em&gt;Domain&lt;/em&gt; does not contain Life Cycle &lt;em&gt;Domains&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Project &lt;em&gt;Subdomains&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Use a &lt;em&gt;Subdomain&lt;/em&gt; to represent your software &lt;em&gt;Application&lt;/em&gt; and its Life Cycle. A &lt;em&gt;Subdomain&lt;/em&gt; defined for an &lt;em&gt;Application&lt;/em&gt; may need a continuous delivery life cycle. This is defined by selecting &amp;ldquo;All &lt;em&gt;Subdomains&lt;/em&gt; are Life Cycles.&amp;rdquo; This means that any &lt;em&gt;Subdomains&lt;/em&gt; cannot include any additional &lt;em&gt;Subdomains&lt;/em&gt; and will be used to represent stages of the &lt;em&gt;Pipeline&lt;/em&gt; with specific &lt;em&gt;Environments&lt;/em&gt; assigned.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Life Cycle &lt;em&gt;Subdomains&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;This is the lowest level of &lt;em&gt;Subdomain&lt;/em&gt;.  It is available when the parent &lt;em&gt;Domain&lt;/em&gt; has &amp;ldquo;All &lt;em&gt;Subdomains&lt;/em&gt; are Life Cycles&amp;rdquo; selected.  These &lt;em&gt;Subdomains&lt;/em&gt; map to each stage in your continuous delivery pipeline. They often have specific &lt;em&gt;Environments&lt;/em&gt; and &lt;em&gt;Tasks&lt;/em&gt; assigned for interaction with your continuous delivery orchestration engine. Ortelius can be called by your continuous delivery Engine (Jenkins, Jenkins X, CircleCI, Google CloudBuild, GitLab or GitHub Actions, etc.) to perform the continuous configuration management of your microservices and &lt;em&gt;Applications&lt;/em&gt; across all lifecyle states. In addition, you can assign Move, Approve and Request Tasks to your Life Cycle &lt;em&gt;Subdomain&lt;/em&gt; to define a continuous delivery pipeline process within Ortelius that can interact with your pipeline process.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Below is an example of how an Online Store Company organized their &lt;em&gt;Domains&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/guides/userguide/images/OnlineStore-Domains.jpg&#34; alt=&#34;Example of Domains, Applications, Components and Environments&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;using-the-domain-dashboard&#34;&gt;Using the Domain Dashboard&lt;/h2&gt;
&lt;p&gt;A full view of all &lt;em&gt;Domains&lt;/em&gt; is based upon your &lt;em&gt;User&lt;/em&gt; privileges. The view is displayed in a &amp;ldquo;Sunburst&amp;rdquo; map, starting at the highest level &lt;em&gt;Domain&lt;/em&gt; with the ability to drive down into the &lt;em&gt;Subdomains&lt;/em&gt;, and &lt;em&gt;Subdomains&lt;/em&gt; after that. Clicking on a segment in the Sunburst map will take you to that &lt;em&gt;Domain&lt;/em&gt;. Clicking on the center of the Sunburst will take you back up the &lt;em&gt;Domain&lt;/em&gt; structure.&lt;/p&gt;
&lt;p&gt;When scrolling up or down the &lt;em&gt;Domain&lt;/em&gt; hierarchy using the Sunburst map, the detail information is re-displayed according to where you are in the map. Below are the details for a &lt;em&gt;Domain&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;_domain_-details&#34;&gt;&lt;em&gt;Domain&lt;/em&gt; Details&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Details&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Full Domain&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The fully qualified &lt;em&gt;Domain&lt;/em&gt; Name including any parent &lt;em&gt;Domains&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The Name of the &lt;em&gt;Domain&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Domain Description.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Owner Type&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;User or Group.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Owner&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Name of the Owner.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Created&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Auto-generated date when it was created.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Modified&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Auto-generated date when it was modified.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Engine&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;The hostname of the deployment engine. Defaults to &amp;ldquo;Deployment Engine.&amp;rdquo; This field can be used to specify another Ortelius Deployment Engine for widely distributed deployments.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;All &lt;em&gt;Subdomains&lt;/em&gt; are Life Cycles&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;This specifies that the &lt;em&gt;Domain&lt;/em&gt; will include a Pipeline model and all following &lt;em&gt;Subdomains&lt;/em&gt; will model the pipeline states.  Life Cycles are specifically for Project &lt;em&gt;Subdomains&lt;/em&gt;.  Life Cycle &lt;em&gt;Domains&lt;/em&gt; cannot have any further &lt;em&gt;Subdomains&lt;/em&gt; and are not appropriate for defining a Catalog &lt;em&gt;Domain&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;&lt;em&gt;Subdomains&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;A list of all &lt;em&gt;Subdomains&lt;/em&gt; assigned to this &lt;em&gt;Domain&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;access-control&#34;&gt;Access Control&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Users&lt;/em&gt; within the designated &lt;em&gt;Groups&lt;/em&gt; of &amp;ldquo;User&amp;rdquo; or &amp;ldquo;Admin&amp;rdquo; can update the &lt;em&gt;Domain&lt;/em&gt; in various ways. To add a &lt;em&gt;Group&lt;/em&gt; to one of the access lists, drag and drop the &lt;em&gt;Group&lt;/em&gt; from the Available &lt;em&gt;Groups&lt;/em&gt; list onto the desired access list. All &lt;em&gt;Users&lt;/em&gt; who belong to a &lt;em&gt;Group&lt;/em&gt; in one of the Access lists will be granted access to the &lt;em&gt;Domain&lt;/em&gt;.  Access control for &lt;em&gt;Domains&lt;/em&gt; include:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Access&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;View&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Allows the &lt;em&gt;Group&lt;/em&gt; to see the &lt;em&gt;Domain&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Change&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Allows the &lt;em&gt;Group&lt;/em&gt; to change the &lt;em&gt;Domain&amp;rsquo;s&lt;/em&gt; characteristics i.e. Name, Summary, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Read&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Allows the &lt;em&gt;Group&lt;/em&gt; to see the &lt;em&gt;Domain&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Write&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Allows the &lt;em&gt;Group&lt;/em&gt; to create &lt;em&gt;Subdomains&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
  </channel>
</rss>
